[user]
  # email = test@example.com # see ./userconfig.example
  name = Larry Botha

[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  # View the current working tree status using the short format
  s = status -s
  st = status
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Commit
  ci = commit
  # Checkout a branch
  co = checkout
  # Checkout a branch
  sw = switch
  # Get better info for a blame:
  #   - -w: ignore whitespace
  #   - -C: and if the file was moved
  #   - -C: or, if the file was created
  #   - -C: or, if there were any commits at all
  #
  # See https://youtu.be/aolI_Rz0ZqY?si=OipSkcO4PnIpwgQg&t=693
  bblame = blame -w -C -C -C
  # Show verbose output about tags, branches or remotes
  tags = tag -l --sort=taggerdate
  branches = branch -a
  remotes = remote -v
  # git flow feature
  ff = "flow feature"
  # git flow release
  fr = "flow release"
  # git flow hotfix
  fh = "flow hotfix"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = warn

[branch]
  # sort branches by commiterdate descending
	sort = -committerdate

[color]
  # Use colors in Git commands that are capable of colored output when outputting to the terminal
  ui = auto
[color "branch"]
  current = blue reverse
  local = blue
  remote = green
[color "diff"]
  meta = blue bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = blue
  changed = green
  untracked = cyan

[column]
  # render branches from `git branch` in columns
	ui = auto

[core]
  # Use Neovim for merges
  editor = nvim
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.config/git/ignore
  attributesfile = ~/.config/git/attributes
  # Treat spaces before tabs, lines that are indented with 8 or more spaces,
  # and all kinds of trailing whitespace as an error
  whitespace = space-before-tab,indent-with-non-tab,trailing-space
  # respect changes to filename case
  ignorecase = false

[diff]
  # use difftastic by default
  external = difft
  # use difft for diffing
  tool = difftastic
  # output logs for submodules that have changed
  submodule = log

[difftool]
  prompt = false

[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"

[include]
  # Add user-specific details to ~/.config/git/config - useful for adding global
  # user.name and user.email configs
  #
  # If the file doesn't exist, this include is ignored
  path = ~/.config/git/userconfig

[init]
  templatedir = ~/.config/git/template

[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true

[pager]
  difftool = true

[pull]
  # Stop Git from emitting a warning when pulling branches
  rebase = false
[push]
  default = simple

[rebase]
  autosquash = true
  autostash = true

[rerere]
  # record merge conflict resolutions, and autamatically apply if possible
  # See https://youtu.be/aolI_Rz0ZqY?si=oDZ4Ww79zqFaSYxx&t=901
	enabled = true

[status]
  # show submodule changes on status
  submoduleSummary = true

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# vim: set filetype=gitconfig:
