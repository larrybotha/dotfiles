#!/usr/bin/env bash

update_existing=false

if [ "$1" == --update-existing -o "$1" == '-u' ]; then
  update_existing=true
fi

function is_installed() {
  if npm list -g "${@}" | grep "empty" >/dev/null; then
    echo false
  else
    echo true
  fi
}

function install_module() {
  installed=$(is_installed "${@}")
  message="updating"

  if test $installed != true; then
    message="installing"
  fi

  echo '-----------------------------------------------'
  echo -e "  ${@}: $message..."
  echo '-----------------------------------------------'

  npm install -g "${@}"

  echo ""
}

function conditional_install() {
  local module="$1"
  local update_existing="$2"
  local installed=$(is_installed $module)

  if test $installed == 'true' && test $update_existing != 'true'; then
    echo "$module already installed - skipping"
  else
    install_module $module
  fi
}

common_modules=(
  alex
  eslint_d
  fast-cli
  fixjson
  gulp-cli
  imageoptim-cli
  jsonlint
  localtunnel
  ndb
  neovim
  ngrok
  nodemon
  prettier
  prettier-plugin-svelte
  @fsouza/prettierd
  @prettier/plugin-php
  server
  typescript
  yo

  # language servers
  ansible-language-server
  bash-language-server
  dockerfile-language-server-nodejs
  intelephense
  pyright
  svelte-language-server
  typescript-language-server
  vim-language-server
  vscode-langservers-extracted # css, html, json
  yaml-language-server

  # vim-imports-sort deps
  import-sort-cli
  import-sort-parser-babylon
  import-sort-parser-typescript
  import-sort-style-renke

  # ale deps
)

mac_modules=(
  alfred-npms
  alfred-fkill
)

for module in "${common_modules[@]}"; do
  conditional_install $module $update_existing
done

if [ $(uname -s) = "Darwin" ]; then
  for module in "${mac_modules[@]}"; do
    conditional_install $module $update_existing
  done
fi
