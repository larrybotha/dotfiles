#!/usr/bin/env bash

cd "$(dirname "${BASH_SOURCE[0]}")" || exit

# Setup logging
LOG_FILE="./tmp/.dotfiles-apply.log"
exec 3>&1 4>&2
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

echo "$(date '+%Y-%m-%d %H:%M:%S') - Starting dotfiles application" >&3
echo "Log file: $LOG_FILE" >&3

function make_heading() {
  local divider="==================================="
  echo -e "\n$divider"
  echo -e "  $*"
  echo "$divider"
}

function log {
  local level="${1:-INFO}"
  local message="$2"
  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')

  echo "[$timestamp] [$level] $message"
}

function log_info {
  log "INFO" "$1"
}

function log_warn {
  log "WARN" "$1"
}

function log_error {
  log "ERROR" "$1"
}

function remove_files() {
  make_heading "deleting unnecessary files"

  files=(
    "$HOME/.tmux.conf" # we're using the XDG_HOME config
  )

  for file in "${files[@]}"; do
    if [ -e "$file" ]; then
      rm -f "$file"
      log_info "removed: $file"
    fi
  done
}

function replace_configs() {
  make_heading "replacing dotfiles"

  local src_dir="./home"
  local configs=(
    ".config/flameshot|$HOME/.config/flameshot"
    ".config/htop|$HOME/.config/htop"
  )

  # TODO: diff files, and confirm overwrite if there are changes
  for config in "${configs[@]}"; do
    IFS='|' read -r -a config <<< "$config"
    local source_path
    source_path=$(realpath "${src_dir}/${config[0]}")
    local dest_path="${config[1]}"

    local action="${dest_path} -> ${source_path}"
    dest_dir=$(dirname "$dest_path")

    mkdir -p "$dest_dir"
    cp -r "$source_path" "$dest_path"

    log_info "replaced: $action"
  done
}

function source_shell() {
  make_heading "sourcing ${SHELL}"

  if [ "${ZSH_VERSION:-}" != "" ]; then
    zsh "$ZDOTDIR"/.zshrc
  elif [ "${BASH_VERSION:-}" != "" ]; then
    source "$HOME/.bash_profile"
  fi

  log_info 'shell sourcing complete'
}

function symlink_configs() {
  make_heading "symlinking configs"

  local src_dir="./home"
  local configs=(
    # $HOME links
    ".bash_profile|$HOME/.bash_profile"
    ".bashrc|$HOME/.bashrc"
    ".cbfmt.toml|$HOME/.cbfmt.toml"
    ".cursor|$HOME/.cursor"
    ".claude|$HOME/.claude"
    ".gemini|$HOME/.gemini"
    ".gnupg|$HOME/.gnupg"
    ".hushlogin|$HOME/.hushlogin"
    ".ignore|$HOME/.ignore"
    ".inputrc|$HOME/.inputrc"
    ".password-store|$HOME/.password-store"
    ".screenrc|$HOME/.screenrc"
    ".scripts|$HOME/.scripts"
    ".wgetrc|$HOME/.wgetrc"
    ".zshenv|$HOME/.zshenv"
    "init|$HOME/init"

    # .config links
    ".config/aider|$HOME/.config/aider"
    ".config/asynctasks|$HOME/.config/asynctasks"
    ".config/atuin|$HOME/.config/atuin"
    ".config/bat|$HOME/.config/bat"
    ".config/ghostty|$HOME/.config/ghostty"
    ".config/git|$HOME/.config/git"
    ".config/just|$HOME/.config/just"
    ".config/karabiner|$HOME/.config/karabiner"
    ".config/kitty|$HOME/.config/kitty"
    ".config/kmonad|$HOME/.config/kmonad"
    ".config/lazygit|$HOME/.config/lazygit"
    ".config/nix|$HOME/.config/nix"
    ".config/nnn|$HOME/.config/nnn"
    ".config/nvim|$HOME/.config/nvim"
    ".config/posting|$HOME/.config/posting"
    ".config/prettierd|$HOME/.config/prettierd"
    ".config/ptpython|$HOME/.config/ptpython"
    ".config/skhd|$HOME/.config/skhd"
    ".config/starship.toml|$HOME/.config/starship.toml"
    ".config/tealdeer|$HOME/.config/tealdeer"
    ".config/tmux-powerline|$HOME/.config/tmux-powerline"
    ".config/tmuxinator|$HOME/.config/tmuxinator"
    ".config/tmux|$HOME/.config/tmux"
    ".config/vectorcode|$HOME/.config/vectorcode"
    ".config/yabai|$HOME/.config/yabai"
    ".config/zsh|$HOME/.config/zsh"

    # Application Support
    "Library/Application Support/xbar|$HOME/Library/Application Support/xbar"
    "Library/Application Support/Claude|$HOME/Library/Application Support/Claude"
  )

  for config in "${configs[@]}"; do
    IFS='|' read -r -a config <<< "$config"
    local source_path
    source_path=$(realpath "${src_dir}/${config[0]}")
    local dest_path="${config[1]}"

    local action="${dest_path} -> ${source_path}"
    local message

    if [ -L "$dest_path" ]; then
      message="linked: ${action}"
    elif [ ! -e "$dest_path" ]; then
      message="linking: ${action}"

      ln -s "$source_path" "$dest_path"
    else
      message="not linked: ${action}\n\t=> consider removing ${source_path}"
    fi

    if [[ "$message" == *"not linked"* ]]; then
      log_warn "$message"
    else
      log_info "$message"
    fi
  done
}

function do_it() {
  log_info "Starting dotfiles application process"

  remove_files
  replace_configs
  symlink_configs
  source_shell

  log_info "Dotfiles application completed successfully"
  echo "$(date '+%Y-%m-%d %H:%M:%S') - Dotfiles application completed" >&3
}

function cleanup_logging() {
  # Restore original file descriptors
  exec 1>&3 2>&4
  exec 3>&- 4>&-
}

# Ensure cleanup happens on exit
trap cleanup_logging EXIT

if [ "${1:-}" == "--force" ] || [ "${1:-}" == "-f" ]; then
  do_it
else
  read -rp "This may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    do_it
  fi
fi

unset do_it \
  log log_info log_warn log_error \
  make_heading \
  remove_files \
  replace_configs \
  source_shell \
  symlink_configs
